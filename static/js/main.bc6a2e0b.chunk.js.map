{"version":3,"sources":["gen.js","App.js","serviceWorker.js","index.js"],"names":["quality_words","char_freq","kana_kanji_dict","isInitialized","get_crossword","number_of_char_types","load","a","word_list","lines","toString","split","slice","replace","forEach","line","spl","map","char","join","Array","from","Set","Object","keys","filter","word","length","match","reduce","b","Promise","resolve","generate_crossword","fetch","then","response","text","words","n_char","arr","num","copy_arr","choose","total","values","arrow","Math","random","threshold","entries","key","ret_arr","i","choosed","push","choose_n","filtered_words","c","includes","table","clg","generateLayout","json_data","toLowerCase","convert_to_json","char_set","concat","delete","kana50","row","Cell","this","props","render_text","color_ans","char_hint","char_ans","className","char_selected","onClick","clicked","Component","App","init_board","setState","cw_board","solved","dict_link","mouseEnter","j","column","JSON","parse","stringify","state","match_c","col","match_r","dict","d","onKeyPress","button","square","onMouseEnter","href","input","layout","default","buttonTheme","class","buttons","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc6a2e0b.chunk.js","sourcesContent":["import clg from 'crossword-layout-generator'\n\nlet isInitialized = false\nlet quality_words\nlet char_freq\nlet kana_kanji_dict\nconst str_kuromasu = '-'\n\nasync function get_crossword(number_of_char_types) {\n    if (isInitialized) {\n        return Promise.resolve(generate_crossword(number_of_char_types, quality_words, char_freq))\n    } else {\n        isInitialized = true\n        return fetch('dic-nico-intersection-pixiv.txt')\n            .then(async response => [quality_words, char_freq, kana_kanji_dict] = load(await response.text()))\n            .then(() => generate_crossword(number_of_char_types, quality_words, char_freq))\n    }\n\n    function load(word_list) {\n        const lines = word_list.toString().split('\\n').slice(8);\n        const replace = {\n            'ぁ': 'あ',\n            'ぃ': 'い',\n            'ぅ': 'う',\n            'ぇ': 'え',\n            'ぉ': 'お',\n            //'っ': 'つ',\n            //'ゃ': 'や',\n            //'ゅ': 'ゆ',\n            //'ょ': 'よ',\n            'ゎ': 'わ'\n        }\n\n        const kana_kanji_dict = {}\n        lines.forEach(line => {\n            const spl = line.split('\\t')\n            spl[0] = spl[0].split(\"\").map(char => {\n                if (replace[char]) { return replace[char] }\n                else { return char }\n            }).join(\"\")\n            kana_kanji_dict[spl[0]] = spl[1]\n        })\n\n        // [Regex Tester - Javascript, PCRE, PHP](https://www.regexpal.com/)\n        const quality_words = Array.from(new Set(\n            Object.keys(kana_kanji_dict)\n                .filter(word => word.length <= 8)\n                .filter(word => word.length >= 4)\n                .filter(word => word.match(/^[ぁ-わをんー]+$/))\n                .filter(word => !word.match(/^([ぁ-わをんー]{1,2})\\1$/))\n                .filter(word => !word.match(/^([ぁ-わをんー]{1})\\1\\1$/))\n                .filter(word => !word.match(/くん$/))\n        ))\n\n        const char_freq = {}\n        quality_words.reduce((a, b) => a + b).split('').forEach(char => {\n            char_freq[char] = char_freq[char] == null ? 1 : char_freq[char] + 1\n        })\n\n        return [quality_words, char_freq, kana_kanji_dict]\n    }\n}\n\nfunction generate_crossword(number_of_char_types, words, char_freq) {\n    function choose_n(arr, num) {\n        const copy_arr = {...arr}\n        function choose(arr) {\n            const total = Object.values(arr).reduce((a, b) => a + b)\n            const arrow = Math.random() * total;\n            let threshold = 0.0;\n            for (const [key, value] of Object.entries(arr)) {\n                threshold += value\n                if (arrow < threshold) { return key }\n            }\n        }\n\n        const ret_arr = []\n        for (let i = 0; i < num; i++) {\n            const choosed = choose(copy_arr)\n            delete copy_arr[choosed]\n            ret_arr.push(choosed)\n        }\n\n        return ret_arr\n    }\n\n    const n_char = choose_n(char_freq, number_of_char_types)\n\n    const filtered_words = words.filter(word => word.split(\"\").map(c => n_char.includes(c)).reduce((a, b) => a && b))\n\n    function convert_to_json(word_list) {\n        var json_data = [];\n        for (let i in word_list) {\n            if (word_list[i].length > 0) {\n                json_data[i] = { \"answer\": word_list[i].toLowerCase() }\n            }\n        }\n\n        return json_data;\n    }\n    \n    const table = clg.generateLayout(convert_to_json(filtered_words)).table\n\n    const char_set = new Set(table.reduce((a, b) => a.concat(b)))\n    char_set.delete(str_kuromasu)\n\n    return [table, char_set]\n}\n\nexport { get_crossword, kana_kanji_dict, str_kuromasu }\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { get_crossword, kana_kanji_dict, str_kuromasu } from './gen';\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\n\nconst number_of_char_types = 15;\nconst number_of_un_filled_char_types = 6;\nconst kana50 = [\n  \"わらゃやまぱばはなだたざさがかあ\",\n  \"をり　　みぴびひにぢちじしぎきい\",\n  \"んるゅゆむぷぶふぬづつずすぐくう\",\n  \"ーれ　　めぺべへねでてぜせげけえ\",\n  \"っろょよもぽぼほのどとぞそごこお\"\n].map(row => row.split(\"\").join(\" \")).concat([\"{space}\"])\nconst game_desc = `1. 同時に点灯するマスには同じ文字、しないマスには違う文字をいれてクロスワードを完成させてください。\n2. すべての単語は「ニコニコ大百科」「ピクシブ百科事典」それぞれに存在する単語にならないといけません。\n3. 「ぁ、ぃ、ぅ、ぇ、ぉ、ゎ」は、それぞれ「あ、い、う、え、お、わ」に対応します。`\n\nclass Cell extends Component {\n  render() {\n    const text = this.props.text\n    let render_text = text\n    let color_ans = false\n    if (text === str_kuromasu) {\n      render_text = '■'\n    } else if (this.props.char_hint[text] !== \"\") {\n      render_text = this.props.char_hint[text]\n    } else if (this.props.char_ans[text] !== \"\") {\n      render_text = this.props.char_ans[text]\n      color_ans = true\n    } else {\n      render_text = \"　\"\n    }\n    return (\n      <span className={((text === this.props.char_selected) ? \" cw-cell_selected\" : \"\") + (color_ans ? \" cw-cell_color-ans\" : \"\")}\n        onClick={() => this.props.clicked(text)}>{render_text}</span>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { cw_board: [], char_hint: {}, char_ans: {}, char_selected: \"\", solved: false, dict_link: [[\"\", \"\"], [\"\", \"\"]] };\n  }\n\n  init_board = async () => {\n    this.setState({ cw_board: [], char_hint: {}, char_ans: {}, char_selected: \"\", solved: false, dict_link: [[\"\", \"\"], [\"\", \"\"]] });\n    const [cw_board, char_set] = await get_crossword(number_of_char_types)\n\n    const char_hint = {}\n    const char_ans = {}\n    char_set.forEach(a => {\n      char_hint[a] = a\n      char_ans[a] = \"\"\n    })\n\n    for (let i = 0; i < number_of_un_filled_char_types; i++) {\n      char_hint[Object.keys(char_hint)[i]] = \"\"\n    }\n\n    this.setState({ cw_board: cw_board, char_hint: char_hint, char_ans: char_ans, char_selected: \"\", solved: false, dict_link: [[\"\", \"\"], [\"\", \"\"]] });\n  }\n\n  async componentDidMount() {\n    this.init_board()\n  }\n\n  mouseEnter = (i, j) => {\n    const column = JSON.parse(JSON.stringify(this.state.cw_board[i]))\n    column[j] = column[j] + \"a\"\n    const match_c = column.join(\"\").match(/^.*?-*([ぁ-わをんー]*)a([ぁ-わをんー]*)-*.*$/)\n\n    const row = JSON.parse(JSON.stringify(this.state.cw_board.map(col => col[j])))\n    row[i] = row[i] + \"a\"\n    const match_r = row.join(\"\").match(/^.*?-*([ぁ-わをんー]*)a([ぁ-わをんー]*)-*.*$/)\n\n    let dict = [match_c[1] + match_c[2], match_r[1] + match_r[2]]\n    dict = dict.map(d => (d.length <= 1) ? [\"\", \"\"] : [`${d} 【${kana_kanji_dict[d]}】`, `https://dic.nicovideo.jp/a/${kana_kanji_dict[d]}`])\n    this.setState({ dict_link: dict })\n  }\n\n  clicked = (text) => {\n    if (text === str_kuromasu || this.state.char_hint[text] !== \"\") return\n    this.setState({ char_selected: text })\n  }\n\n  onKeyPress = (button) => {\n    if (button === \"　\" || button === \"{space}\") button = \"\"\n    this.setState(state => {\n      state.char_ans[this.state.char_selected] = button\n      let solved = true\n      for (const [key, value] of Object.entries(state.char_hint)) {\n        if (value === \"\" && state.char_ans[key] !== key) solved = false\n      }\n      state.solved = solved\n      return state\n    })\n  }\n\n  render() {\n    return (\n      <div className={\"App\" + ((this.state.solved) ? \" solved\" : \"\")}>\n        <div className=\"desc\">\n          <h1>\n            ナンクロ　nico-pixiv\n          </h1>\n          <p>\n            {game_desc}\n          </p>\n        </div>\n        <div className={\"cw-board\"}>\n          {this.state.cw_board.map((row, i) =>\n            <div key={i} className={\"cw-row\"}>\n              {row.map((square, j) =>\n                <span className={\"cw-cell\"} onMouseEnter={() => this.mouseEnter(i, j)}>\n                  <Cell key={j} text={square} char_hint={this.state.char_hint} char_ans={this.state.char_ans} clicked={this.clicked} char_selected={this.state.char_selected}></Cell>\n                </span>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"show-after-clear\">\n          <button onClick={async () => this.init_board()}>次の問題</button>\n          <div><a href={this.state.dict_link[0][1]}>{\"ヨコ: \" + this.state.dict_link[0][0]}</a></div>\n          <div><a href={this.state.dict_link[1][1]}>{\"タテ: \" + this.state.dict_link[1][0]}</a></div>\n        </div>\n        <div className=\"show-before-clear\">\n          <div className=\"keyboard\">\n            <Keyboard onKeyPress={input => this.onKeyPress(input)} layout={{ default: kana50 }}\n              buttonTheme={[\n                {\n                  class: \"disabled_hint\",\n                  buttons: Object.values(this.state.char_hint).join(\" \")\n                },\n                {\n                  class: \"disabled_ans\",\n                  buttons: Object.values(this.state.char_ans).join(\" \")\n                }\n              ]}></Keyboard>\n          </div>\n          <button onClick={async () => this.init_board()}>次の問題</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}